name: CI / CD pipeline

on:
  push:
    branches:
      - '*'
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - run: docker compose build
      - run: docker compose down -v --remove-orphans
      - run: docker compose up -d
      - name: Lint
        run: docker compose exec -T backend bash /app/scripts/lint.sh
      - name: Run tests
        run: docker compose exec -T backend bash /app/tests-start.sh "Coverage for ${{ github.sha }}"
      - run: docker compose down -v --remove-orphans
      - name: Store coverage files
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: backend/htmlcov

  # https://github.com/marketplace/actions/alls-green#why
  alls-green:  # This job does nothing and is only used for the branch protection
    if: always()
    needs:
      - tests
    runs-on: ubuntu-latest
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}

  smokeshow:
    if: github.ref == 'refs/heads/main'
    needs:
      - alls-green
    runs-on: ubuntu-latest
    permissions:
      actions: read
      statuses: write
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - run: pip install smokeshow
      - uses: dawidd6/action-download-artifact@v6
        with:
          workflow: test.yml
          commit: ${{ github.event.workflow_run.head_sha }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - run: smokeshow upload coverage-html
        env:
          SMOKESHOW_GITHUB_STATUS_DESCRIPTION: Coverage {coverage-percentage}
          SMOKESHOW_GITHUB_COVERAGE_THRESHOLD: 90
          SMOKESHOW_GITHUB_CONTEXT: coverage
          SMOKESHOW_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SMOKESHOW_GITHUB_PR_HEAD_SHA: ${{ github.event.workflow_run.head_sha }}
          SMOKESHOW_AUTH_KEY: ${{ secrets.SMOKESHOW_AUTH_KEY }}
  build-stg:
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
    runs-on: ubuntu-latest
    needs:
      - alls-green
    env:
      ENVIRONMENT: staging
      DOMAIN: ${{ vars.DOMAIN_STAGING }}
      STACK_NAME: ${{ vars.STACK_NAME_STAGING }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      FIRST_SUPERUSER: ${{ secrets.FIRST_SUPERUSER }}
      FIRST_SUPERUSER_PASSWORD: ${{ secrets.FIRST_SUPERUSER_PASSWORD }}
      SMTP_HOST: ${{ vars.SMTP_HOST }}
      SMTP_USER: ${{ secrets.SMTP_USER }}
      SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
      EMAILS_FROM_EMAIL: ${{ secrets.EMAILS_FROM_EMAIL }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      TAG: ${{ github.sha }}
      AI_MOCK_REST_CALLS: ${{ vars.MOCK_REST_CALLS_STAGING }}
      OPEN_API_KEY: ${{ secrets.OPEN_API_KEY_STAGING }}
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Get commit SHA
        id: commit_sha
        run: echo "::set-output name=COMMIT_SHA::$(git rev-parse --short HEAD)"
      - name: Check presence of environment attributes
        run: echo "AI_MOCK_REST_CALLS - $AI_MOCK_REST_CALLS \n TAG - $TAG \n OPEN_API_KEY - $OPEN_API_KEY"
      - name: Build Docker images for stg
        run: docker-compose -f docker-compose.yml --project-name ${{ secrets.STACK_NAME_STAGING }} build
      - name: Push Docker images for stg
        run: docker-compose -f docker-compose.yml --project-name ${{ secrets.STACK_NAME_STAGING }} push

  deploy-stg:
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://stg-study-genius.zuroo.eu/
    needs:
      - build-stg
    runs-on:
      - self-hosted
      - staging
    env:
      ENVIRONMENT: staging
      DOMAIN: ${{ vars.DOMAIN_STAGING }}
      STACK_NAME: ${{ vars.STACK_NAME_STAGING }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      FIRST_SUPERUSER: ${{ secrets.FIRST_SUPERUSER }}
      FIRST_SUPERUSER_PASSWORD: ${{ secrets.FIRST_SUPERUSER_PASSWORD }}
      SMTP_HOST: ${{ vars.SMTP_HOST }}
      SMTP_USER: ${{ secrets.SMTP_USER }}
      SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
      EMAILS_FROM_EMAIL: ${{ secrets.EMAILS_FROM_EMAIL }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      TAG: ${{ github.sha }}
      AI_MOCK_REST_CALLS: ${{ vars.MOCK_REST_CALLS_STAGING }}
      OPEN_API_KEY: ${{ secrets.OPEN_API_KEY_STAGING }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Shut down docker compose deployment
        continue-on-error: true
        run: docker-compose -f docker-compose-run.yml --project-name ${{ secrets.STACK_NAME_STAGING }} down
      - name: Start the updated docker compose deployment
        if: always()
        run: docker-compose -f docker-compose-run.yml --project-name ${{ secrets.STACK_NAME_STAGING }} up -d
